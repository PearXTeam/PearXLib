using System;

namespace PearXLib
{
    /// <summary>
    /// PearXLib random utilities.
    /// </summary>
    public class RandomUtils
    {
        /// <summary>
        /// Generates a random character.
        /// </summary>
        /// <returns>Random character.</returns>
        public static char GenChar(Random rand)
        {
            const string chars = "abcdefghijklmnopqrstuvwxyz";
            int i = rand.Next(chars.Length);
            return chars[i];
        }

        /// <summary>
        /// Generates a random digit.
        /// </summary>
        /// <returns>Random digit</returns>
        public static int GenNumber(Random rand)
        {
            return rand.Next(0, 10);
        }

        /// <summary>
        /// Generates a random number.
        /// </summary>
        /// <param name="min">Minimal random number (inclusive).</param>
        /// <param name="max">Maximal random number (inclusive).</param>
        /// <param name="rand">Your random.</param>
        /// <returns>Random number.</returns>
        public static int GenNumber(Random rand, int min, int max)
        {
            return rand.Next(min, max + 1);
        }

        /// <summary>
        /// Generates a random symbol.
        /// </summary>
        /// <param name="rand"></param>
        /// <returns></returns>
        public static char GenSymbol(Random rand)
        {
            const string chars = "!@#$%^&*()_+\"№;%:?*()=-.,/\\|'";
            int i = rand.Next(chars.Length);
            return chars[i];
        }

        /// <summary>
        /// Generates a random number/char/symbol.
        /// </summary>
        /// <returns>Random.</returns>
        public static char GenRandom(Random rand, bool useSymbols)
        {
            int i = rand.Next(0, useSymbols ? 4 : 3);
            switch (i)
            {
                case 0:
                    return Convert.ToChar(GenNumber(rand).ToString());
                case 1:
                    return GenChar(rand);
                case 2:
                    return Convert.ToChar(GenChar(rand).ToString().ToUpper());
                case 3:
                    return GenSymbol(rand);
                default:
                    return '0';
            }

        }

        /// <summary>
        /// Generates a random string by the template.<para/>
        /// Template usage:<para/>
        /// %num% - a random figure, ex. 6 or 7.<para/>
        /// %char% - a random character, ex. b or e.<para/>
        /// %sym% - a random symbol, ex. ~ or +.<para/>
        /// %rand% - a random symbol, character, or figure.<para/>
        /// %randws% - a random character or figure.<para/>
        /// Write in uppercase for uppercase :p.<para/>
        /// Example template: q_%rand%%sym%%CHAR%%CHAR%_p. Example return: q_5+FS_p
        /// </summary>
        /// <param name="template">A template</param>
        /// <param name="rand">Your random</param>
        /// <returns>A random generated by template string.</returns>
        public static string ByTemplate(string template, Random rand)
        {
            while (template.Contains("%char%"))
            {
                PXL.ReplaceFirst(ref template, "%char%", GenChar(rand).ToString());
            }
            while (template.Contains("%CHAR%"))
            {
                PXL.ReplaceFirst(ref template, "%CHAR%", GenChar(rand).ToString().ToUpper());
            }
            while (template.Contains("%num%"))
            {
                PXL.ReplaceFirst(ref template, "%num%", GenNumber(rand).ToString());
            }
            while (template.Contains("%rand%"))
            {
                PXL.ReplaceFirst(ref template, "%rand%", GenRandom(rand, true).ToString());
            }
            while (template.Contains("%randws%"))
            {
                PXL.ReplaceFirst(ref template, "%randws%", GenRandom(rand, false).ToString());
            }
            while (template.Contains("%RAND%"))
            {
                PXL.ReplaceFirst(ref template, "%RAND%", GenRandom(rand, true).ToString().ToUpper());
            }
            while (template.Contains("%RANDWS%"))
            {
                PXL.ReplaceFirst(ref template, "%RANDWS%", GenRandom(rand, false).ToString().ToUpper());
            }
            while (template.Contains("%sym%"))
            {
                PXL.ReplaceFirst(ref template, "%sym%", GenSymbol(rand).ToString());
            }
            return template;
        }
    }
}
